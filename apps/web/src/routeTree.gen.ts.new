/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AgentImport } from './routes/agent/__root'
import { Route as AgentIndexImport } from './routes/agent/index'
import { Route as AdminImport } from './routes/admin/__root'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminTransactionsImport } from './routes/admin/transactions'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AgentRoute = AgentImport.update({
  id: '/agent',
  path: '/agent',
  getParentRoute: () => rootRoute,
} as any)

const AgentIndexRoute = AgentIndexImport.update({
  id: '/agent/',
  path: '/',
  getParentRoute: () => AgentRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/admin/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)

const AdminTransactionsRoute = AdminTransactionsImport.update({
  id: '/admin/transactions',
  path: '/transactions',
  getParentRoute: () => AdminRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/agent': typeof AgentRoute
  '/agent/': typeof AgentIndexRoute
  '/login': typeof LoginRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/agent': typeof AgentRoute
  '/agent/': typeof AgentIndexRoute
  '/login': typeof LoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/agent': typeof AgentRoute
  '/agent/': typeof AgentIndexRoute
  '/login': typeof LoginRoute
}

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AdminRoute.addChildren([
    AdminIndexRoute,
    AdminUsersRoute,
    AdminTransactionsRoute,
  ]),
  AgentRoute.addChildren([
    AgentIndexRoute,
  ]),
  LoginRoute,
])
