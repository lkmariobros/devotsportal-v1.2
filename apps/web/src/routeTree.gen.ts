/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AgentrootImport } from './routes/agent/__root'
import { Route as AdminrootImport } from './routes/admin/__root'
import { Route as TodosImport } from './routes/todos'
import { Route as TestImport } from './routes/test'
import { Route as LoginImport } from './routes/login'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AgentDashboardImport } from './routes/agent/dashboard'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminTransactionsImport } from './routes/admin/transactions'

// Create/Update Routes

const AgentrootRoute = AgentrootImport.update({
  id: '/agent/__root',
  getParentRoute: () => rootRoute,
} as any)

const AdminrootRoute = AdminrootImport.update({
  id: '/__root',
  getParentRoute: () => AdminRoute,
} as any)

const TodosRoute = TodosImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRoute,
} as any)

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AgentDashboardRoute = AgentDashboardImport.update({
  id: '/agent/dashboard',
  path: '/agent/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)

const AdminTransactionsRoute = AdminTransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosImport
      parentRoute: typeof rootRoute
    }
    '/admin/__root': {
      id: '/admin/__root'
      path: ''
      fullPath: '/admin'
      preLoaderRoute: typeof AdminrootImport
      parentRoute: typeof AdminImport
    }
    '/admin/transactions': {
      id: '/admin/transactions'
      path: '/transactions'
      fullPath: '/admin/transactions'
      preLoaderRoute: typeof AdminTransactionsImport
      parentRoute: typeof AdminImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminImport
    }
    '/agent/__root': {
      id: '/agent/__root'
      path: '/agent'
      fullPath: '/agent'
      preLoaderRoute: typeof AgentrootImport
      parentRoute: typeof rootRoute
    }
    '/agent/dashboard': {
      id: '/agent/dashboard'
      path: '/agent/dashboard'
      fullPath: '/agent/dashboard'
      preLoaderRoute: typeof AgentDashboardImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminrootRoute: typeof AdminrootRoute
  AdminTransactionsRoute: typeof AdminTransactionsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminrootRoute: AdminrootRoute,
  AdminTransactionsRoute: AdminTransactionsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminrootRoute
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/todos': typeof TodosRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/agent': typeof AgentrootRoute
  '/agent/dashboard': typeof AgentDashboardRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/todos': typeof TodosRoute
  '/admin': typeof AdminIndexRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/agent': typeof AgentrootRoute
  '/agent/dashboard': typeof AgentDashboardRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/todos': typeof TodosRoute
  '/admin/__root': typeof AdminrootRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/agent/__root': typeof AgentrootRoute
  '/agent/dashboard': typeof AgentDashboardRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/test'
    | '/todos'
    | '/admin/transactions'
    | '/admin/users'
    | '/agent'
    | '/agent/dashboard'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/test'
    | '/todos'
    | '/admin'
    | '/admin/transactions'
    | '/admin/users'
    | '/agent'
    | '/agent/dashboard'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/test'
    | '/todos'
    | '/admin/__root'
    | '/admin/transactions'
    | '/admin/users'
    | '/agent/__root'
    | '/agent/dashboard'
    | '/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
  TestRoute: typeof TestRoute
  TodosRoute: typeof TodosRoute
  AgentrootRoute: typeof AgentrootRoute
  AgentDashboardRoute: typeof AgentDashboardRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
  TestRoute: TestRoute,
  TodosRoute: TodosRoute,
  AgentrootRoute: AgentrootRoute,
  AgentDashboardRoute: AgentDashboardRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/login",
        "/test",
        "/todos",
        "/agent/__root",
        "/agent/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/__root",
        "/admin/transactions",
        "/admin/users",
        "/admin/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/todos": {
      "filePath": "todos.tsx"
    },
    "/admin/__root": {
      "filePath": "admin/__root.tsx",
      "parent": "/admin"
    },
    "/admin/transactions": {
      "filePath": "admin/transactions.tsx",
      "parent": "/admin"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx",
      "parent": "/admin"
    },
    "/agent/__root": {
      "filePath": "agent/__root.tsx"
    },
    "/agent/dashboard": {
      "filePath": "agent/dashboard.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
